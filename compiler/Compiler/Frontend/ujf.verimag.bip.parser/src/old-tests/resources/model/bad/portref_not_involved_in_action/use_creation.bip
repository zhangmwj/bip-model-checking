package use_creation

 port type Port_t()
 port type Port_t2(int x, float y)
 port type Port_t3()

 connector type Three_leg (Port_t p1, Port_t p2, Port_t p3)
 define p1 p2 p3
 end

 atom type Atom_simple (int as1)
      data int internal_x

      port Port_t p1(), p2(), p3()

      place S1,S2,S3,S4
      initial to S1 do { 
      	      // internal_x = as1; 
      }
      on p1 from S1 to S2,S3
      on p2 from S2,S3 to S3,S4
      on p3 from S4 to S1
 end

 compound type Compound_simple()

      component Atom_simple a1(1), a2(2)
 end

 @sampleannotation
 @anotherannotation
 atom type Atom_t()
    data int dx
    data float fx
    data int a_variable

    export data int y
    export port Port_t x()
    export port Port_t3 xx()

    port Port_t2 x2(dx, fx)

    export port Port_t2 mpx1(dx, fx), mpx2(dx, fx) as mps2

    port Port_t p1(),p2()
    port Port_t p3()
    export port Port_t ep1(),ep2()
    export port Port_t ep3()
    export port Port_t mp1(), mp2() as mps
    
    place S1,S2,S3,S4,S5
    initial to S2,S3 do {
		    dx = 1 + fx;
 		    fx = 4%dx;
                  }


    on p1 from S1 to S2 provided (dx == 1) do {dx = 1;} 
    on p2 from S2 to S1 do {dx = 18;}
    internal from S3 to S4

    priority bla x < xx
    priority bla2  x < x2  provided (dx == 3)
    priority bla_wc x < *
    priority bla_wx2 * < x

 end

 @annotforconn(param1=val1)
 connector type Conn_t3 (Port_t2 p1, Port_t p2)
   data int d1,y
   define p1 p2'
   
  on p1 p2 provided (p1.x == 2) down {
     	p1.x = 3 + 4;
	p1.y = d1 % y;
  }

  on p2 down { p1.x = 3;}

 end

 connector type Conn_t(Port_t p1, Port_t p2)
   data int x,y,z
   data float pouet

   export port Port_t p()

   define p1' p2'
 end

 connector type Conn_t4(Port_t2 p1, Port_t2 p2)
     data int x, intx
     data float ey
     export port Port_t2 ep(x,ey)
     define p1 p2
     
     on p1 p2 provided (p1.x == 2)
     	up {
	   x = 4;
	   x = p1.x + p2.y;
	   // f(p1.x);
	   // f(x);
	}
	down {
	   x = 5;
	   ey = p1.y;
	   p1.x = 7;
	}

 end

 connector type Conn_t2(Port_t p1, Port_t p2)
 data int dx
 data float fx
 export port Port_t2 p(dx, fx)
 define p1' p2'
 // we are not checking that all interaction are specified. We should.
 on p1 p2 up {
    dx = 1; 
    fx = 1;
 }
 
 on p1 up {
    dx = 2;
    fx = 2; 
 }

 on p2 up {
    dx = 3;
    fx = 3;
 }
 end

 compound type Compound_t()
    component Atom_t c1(), c2(), c3()
    component Atom_simple a1(1), a2(2)

    connector Conn_t conn1(c1.x, c2.x), conn2(c1.x, c2.x)
    
    connector Three_leg leg3(c1.x, c2.x, c3.x)

    // Yes, these priorities do not make sense.
    priority toto1  conn1: c1.x,c2.x < conn2:c1.x, c2.x provided (c1.y < 1 * 2 * 3 * 4 - 1 + c2.y && 1>2 && c3.y > 1)
    priority toto2  conn1: c1.x,c2.x < *
    priority toto3   * < conn2:c1.x, c2.x 

    export port c1.x as y
    export port c2.x as z
    export port c3.x, c1.x as mp

    export data c1.y as dy
 end
end